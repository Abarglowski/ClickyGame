{"version":3,"sources":["components/Jumbotron.js","components/Clicky.js","components/images/ClickyImages.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Clicky","props","children","ClickyImages","onClick","handleClick","id","alt","name","src","image","Score","highScore","score","App","state","imglist","img","clicked","imgID","imgArr","Object","toConsumableArray","_this","isClicked","console","log","forEach","setState","sort","Math","random","alert","length","_this2","this","components_Jumbotron","components_Score","components_Clicky","map","images_ClickyImages","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8EAaeA,MAXf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,0CAChBH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,0HACAF,EAAAC,EAAAC,cAAA,8HACAF,EAAAC,EAAAC,cAAA,wDCAOE,MANf,SAAgBC,GACZ,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUE,EAAMC,iBCQxBC,MATf,SAAsBF,GAElB,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BK,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,MACjFV,EAAAC,EAAAC,cAAA,OAAKS,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,iBCC9BC,MANf,SAAeV,GACX,OACIL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BAAd,eAAsDE,EAAMW,UAA5D,UAA8EX,EAAMY,QC+E7EC,6MA1EbC,MAAQ,CACNC,QAAUC,EACVX,GAAIW,EAAIX,GACRY,SAAS,EACTL,MAAO,EACPD,UAAW,KAGbP,YAAc,SAAAc,GACZ,IAAMC,EAAMC,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMC,SAE1BQ,GAAY,EAClBC,QAAQC,IAAIP,GACVC,EAAOO,QAAQ,SAAAV,GACVA,EAAIX,KAAOa,IACRF,EAAIC,UACNM,GAAY,EACZP,EAAIC,SAAU,MAKjBM,EACDD,EAAKK,SAAS,CACZf,MAAOU,EAAKR,MAAMF,MAAQ,EAC1BG,QAASO,EAAKR,MAAMC,QAAQa,KAAK,iBAAM,GAAMC,KAAKC,cAIpDX,EAAOO,QAAQ,SAAAV,GACbA,EAAIC,SAAU,IAEhBc,MAAM,8CACNT,EAAKK,SAAS,CACZf,MAAO,EACPG,QAASO,EAAKR,MAAMC,QAAQa,KAAK,iBAAM,GAAMC,KAAKC,cAGnDR,EAAKR,MAAMF,QAAUU,EAAKR,MAAMC,QAAQiB,SACzCD,MAAM,iBACNT,EAAKK,SAAS,CACZV,SAAU,EACVL,MAAQ,KAGTU,EAAKR,MAAMF,OAASU,EAAKR,MAAMH,WAChCW,EAAKK,SAAS,CACZhB,UAAWW,EAAKR,MAAMF,iFAKnB,IAAAqB,EAAAC,KACP,OACEvC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,CAAOzB,UAAWuB,KAAKpB,MAAMH,UAAWC,MAAOsB,KAAKpB,MAAMF,QAC1DjB,EAAAC,EAAAC,cAACwC,EAAD,KACCH,KAAKpB,MAAMC,QAAQuB,IAAI,SAAAtB,GACtB,OACErB,EAAAC,EAAAC,cAAC0C,EAAD,CACAC,IAAKxB,EAAIX,GACTA,GAAIW,EAAIX,GACRI,MAAOO,EAAIP,MACXL,YAAa6B,EAAK7B,yBAjEVqC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72596362.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Jumbotron (){\r\n    return(\r\n        <div className =\"jumbotron bg-info text-light pb-1 pt-1\">\r\n        <h1> Welcome to Clicky Game!</h1>\r\n        <p>Down below are images that you can click.  everytime you click one you get a point, and the pictures shuffle.</p>\r\n        <p>Then you will be able to click another picture, make sure you dont click the same picture twice or you will lose!</p>\r\n        <p>To win you must click each picture once. </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from \"react\";\r\n\r\nfunction Clicky(props){\r\n    return(\r\n        <div className=\"clicky\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Clicky","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ClickyImages(props) {\r\n\r\n    return(\r\n        <div className=\"card img-fluid img-container\" onClick={() => props.handleClick(props.id)}>\r\n            <img alt={props.name} src={props.image}/>\r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default ClickyImages;","import React from \"react\";\r\n\r\nfunction Score(props){\r\n    return(\r\n        <h4 className=\"text-success text-center\">High Score: {props.highScore} Score {props.score}</h4>\r\n    )\r\n}\r\n\r\nexport default Score","import React from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\"\nimport Clicky from \"./components/Clicky\"\nimport ClickyImages from \"./components/images/ClickyImages\"\nimport img from './img.json';\nimport Score from \"./components/Score\"\n\nclass App extends React.Component {\n  state = {\n    imglist : img,\n    id: img.id,\n    clicked: false,\n    score: 0,\n    highScore: 0\n  };\n\n  handleClick = imgID =>{\n    const imgArr = [...this.state.imglist]\n\n    var isClicked = false\n  console.log(imgID);\n    imgArr.forEach(img =>{\n      if(img.id === imgID){\n        if(!img.clicked){\n          isClicked = true\n          img.clicked = true\n        }\n      }\n    })\n\n    if(isClicked){\n      this.setState({\n        score: this.state.score + 1,\n        imglist: this.state.imglist.sort(() => 0.5 - Math.random())\n      });\n    }\n    else{\n      imgArr.forEach(img => {\n        img.clicked = false\n      })\n      alert(\"Sorry you selected a hero twice, you lose!\")\n      this.setState({\n        score: 0,\n        imglist: this.state.imglist.sort(() => 0.5 - Math.random())\n      })\n    }\n    if(this.state.score === this.state.imglist.length) {\n      alert(\"You have won!\");\n      this.setState({\n        clicked : false,\n        score : 0\n      })\n    }\n    if(this.state.score >= this.state.highScore){\n      this.setState({\n        highScore: this.state.score\n      })\n    }\n}\n\n  render() {\n    return (\n      <div>\n      <Jumbotron />\n      <Score highScore={this.state.highScore} score={this.state.score}/>\n      <Clicky>\n      {this.state.imglist.map(img =>{\n        return(\n          <ClickyImages \n          key={img.id}\n          id={img.id}\n          image={img.image}\n          handleClick={this.handleClick}\n          />\n        )\n      })}\n      </Clicky>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}